package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"io"
	"os"
	"strings"
	"text/template"
)

func main() {
	flag.Usage = func() {
		fmt.Fprintf(flag.CommandLine.Output(), "Usage of generate_ast <output directory>\n")
		flag.PrintDefaults()
	}
	flag.Parse()

	if len(flag.Args()) == 0 {
		panic("Usage: generate_ast <output directory>")
	}

	outputDir := flag.Arg(0)

	expr := astInput{
		Split: func(a string) []string {
			res := []string{}
			for _, s := range strings.Split(a, ",") {
				res = append(res, strings.TrimSpace(s))
			}
			return res
		},
		BaseName: "Expr",
		Types: []struct {
			NodeName      string
			SubProduction string
		}{
			{"Assign", "Name scanner.Token, Value Expr"},
			{"Binary", "Left Expr, Operator scanner.Token, Right Expr"},
			{"Grouping", "Expression Expr"},
			{"Literal", "Value any"},
			{"Unary", "Operator scanner.Token, Right Expr"},
			{"Variable", "Name scanner.Token"},
		},
	}
	defineAst(outputDir, expr)

	stmt := astInput{
		Split: func(a string) []string {
			res := []string{}
			for _, s := range strings.Split(a, ",") {
				res = append(res, strings.TrimSpace(s))
			}
			return res
		},
		BaseName: "Stmt",
		Types: []struct {
			NodeName      string
			SubProduction string
		}{
			{"Block", "Statements []Stmt"},
			{"Expression", "Expression Expr"},
			{"Print", "Expression Expr"},
			{"Var", "Name scanner.Token, Initializer Expr"},
		},
	}
	defineAst(outputDir, stmt)
}

type astInput struct {
	BaseName string
	Types    []struct {
		NodeName      string
		SubProduction string
	}
	Split func(string) []string
}

func defineAst(outputDir string, types astInput) {
	path := outputDir + "/" + strings.ToLower(types.BaseName) + ".go"
	tmpl, err := template.New("test").Parse(astContext)
	if err != nil {
		panic(err)
	}
	file, err := os.Create(path)
	if err != nil {
		panic(err)
	}
	code := bytes.NewBuffer(nil)
	err = tmpl.Execute(code, types)
	if err != nil {
		panic(err)
	}
	res, err := format.Source(code.Bytes())
	if err != nil {
		panic(err)
	}
	io.Copy(file, bytes.NewBuffer(res))
}

const astContext = `// Code generated by "sh shell.sh"; DO NOT EDIT.
package parser

import(
	"craftinginterpreters/lox/scanner"
)
{{- $BaseName := .BaseName}}
type {{.BaseName}}Visitor interface{
	{{- range .Types}}
	Visit{{.NodeName}}{{$BaseName}}(*{{.NodeName}}) any
	{{- end}}
}

type {{.BaseName}} interface{
	Accept({{.BaseName}}Visitor) any
}
{{- $Split := .Split}}
{{ range .Types }}
type {{ .NodeName }} struct{
	{{- range (call $Split .SubProduction)}}
	{{.}}
	{{- end}}
}

func (i *{{.NodeName}})Accept(v {{$BaseName}}Visitor) any{
	return v.Visit{{.NodeName}}{{$BaseName}}(i)
}
{{- end}}
`
